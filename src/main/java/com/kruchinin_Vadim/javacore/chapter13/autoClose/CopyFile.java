package com.kruchinin_Vadim.javacore.chapter13.autoClose;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

/*
    Версия программы CopyFile, использующая оператор try с ресурсами. Она демонстрирует управление двумя
ресурсами (в данном случае - файлами) в одном операторе try
 */
class CopyFile {
    public static void main(String[] args) throws IOException {
        int i;

        // сначала убедимся, что заданы оба файла
        if (args.length != 2) {
            System.out.println("Использование: CopyFile откуда куда");
            return;
        }

        // открыть два файла и управлять ими в операторе try
        try (FileInputStream fin = new FileInputStream(args[0]);
             FileOutputStream fout = new FileOutputStream(args[1])) {
            do {
                i = fin.read();
                if (i != -1) {
                    fout.write(i);
                }
            } while (i != -1);
        } catch (IOException e) {
            System.out.println("Ошибка ввода/вывода: " + e);
        }
    }
}
/*
    По завершении этого блока оператора try будут закрыты оба ресурса в переменных fin и fout.
Если сравнить эту версию программы с предыдущей, то можно заметить, что она значительно короче.
Возможность упростить исходный код является дополнительным преимушеством автоматического управления ресурсами.

У оператора t ry с ресурсами имеется еще одна особенность, о которой стоит упомянуть. В общем, когда
выполняется блок оператора try, существует вероятность того, что исключение, возникающее в блоке оператора try,
приведет к другому исключению, которое произойдет в тот момент, когда ресурс закрывается в блоке оператора finally.
Если это "обычный" оператор try, то первоначальное исключение теряется, будучи вытесненным вторым исключением.
А если используется оператор try с ресурсами, то второе исключение подавляется, но не теряется. Вместо этого
оно добавляется в список подавленных исключений, связанных с первым исключением. Доступ к списку подавленных
исключений может быть получен с помощью метода get Suppressed(), определенного в классе Throwable.
 */
