package com.kruchinin_Vadim.javacore.chapter13.ReadAndRecordingInFile;

import java.io.FileInputStream;
import java.io.IOException;

/*
    Отображение содержимого текстового файла.
Чтобы воспользоваться этой программой, укажите имя файла, который требуется просмотреть.
Например , чтобы просмотреть файл TEST.TXT, введите в командной строке следующую команду:
java ShowFile TEST.TXT

    В этом варианте программы код, открывающий и получающий доступ к файлу, заключен в один блок оператора try.
Файл закрывается в блоке оператора finally.
 */
class ShowFile2 {
    public static void main(String[] args) {
        int i;
        FileInputStream fin = null;

        // сначала убедимся, что имя файла указано
        if (args.length != 1) {
            System.out.println("Использование: ShowFile имя_файла");
            return;
        }

        // В следующем коду сначала открывается файл, а затем из него читаются символы до тех пор,
        // пока не встретится признак конца файла
        try {
            fin = new FileInputStream(args[0]);

            do {
                i = fin.read();
                if (i != -1) {
                    System.out.println((char) i);
                }
            } while (i != -1);
        } catch (IOException e) {
            System.out.println("Произошла ошибка ввода/вывода");
        } finally {
            // закрыть файл в любом случае
            try {
                if (fin != null) {
                    fin.close();
                }
            } catch (IOException e) {
                System.out.println("Ошибка закрытия файла");
            }
        }
    }
}

/*
    Как видите, при таком подходе объект fin инициализируется пустым значением null.
А в блоке оператора finally файл закрывается только в том случае, если объект fin не содержит пустое значение null.
Такой подход оказывается работоспособным потому, что объект fin не будет содержать пустое значение null только
том случае, если файл успешно открыт. Таким образом, метод close() невызывается,
если при открытии файла возникает исключение.

    Последовательность операторов try/catch в приведенном выше примере можно сделать более краткой.
Класс исключения FileNotFoundException является производным от класса IOException,
и поэтому обрабатывать отдельно его исключение совсем не обязательно.
 */
